'use strict';

// Функция генерирования массива заполненого n кол-вом элементов случайными числами в диапазоне от min до max
const getRndArr = (n, min, max) =>
   Array.from(
      { length: n },
      () =>
         Math.floor(
            Math.random() * (Math.max(min, max) - Math.min(min, max) + 1)
         ) + Math.min(min, max)
   );

// Функция возвращает форматированную строку текста с горизонтальными разделителями, используется в паре функций для вывода инфы
const separText = (text) => {
   return `\n----------------------------------------------------------------------------\n"${text}"\n----------------------------------------------------------------------------\n`;
};

// # Задание 1
// Создайте калькулятор, который считает стоимость ремонта комнаты.
// Для подсчета площади комнаты необходимо использовать длину и ширину комнаты,
// которые пользователь вводит с клавиатуры. Пользователю предоставляется три вида ремонта:
// 1. минимальный 7 000 за метр квадратный.
// 2. средний 10 000 за метр квадратный.
// 3. максимальный 15 000 за метр квадратный.
const exerсise1 = () => {
   const userDataCheck = (data) => {
      if (isNaN(data)) {
         alert('Введены неверные данные.');

         return false;
      } else {
         return true;
      }
   };

   const userLvlCheck = (data) => {
      let res = ![1, 2, 3].includes(data);

      if (isNaN(data) || res) {
         alert('Можно вводить только цифру из списка.');

         return false;
      } else {
         return true;
      }
   };

   const roomLength = +prompt('Введите длину комнаты в метрах.');

   if (userDataCheck(roomLength)) {
      const roomWidth = +prompt('Введите ширину комнаты в метрах.');

      if (userDataCheck(roomWidth)) {
         const repairLvl = +prompt(
            'Введите уровень желаемого ремонта:\n1 - Минимальный (7 тыс.р./м.кв)\n2 - Средний (10 тыс.р./м.кв.)\n3 - Максимальный (15 тыс.р./м.кв)'
         );

         if (userLvlCheck(repairLvl)) {
            const getPrice = (roomLength, roomWidth, repairLvl) =>
               roomLength * roomWidth * [7000, 10000, 15000][repairLvl - 1];

            alert(
               getPrice(roomLength, roomWidth, repairLvl)
                  .toString()
                  .replace(/(\d)(?=(\d\d\d)+([^\d]|$))/g, '$1 ') + 'р.'
            );
         }
      }
   }
};

// # Задание 2
// Создайте массив, состоящий из 4 произвольных значений, которые генерируются программой (диапазон значений от 1 до 10).
// Умножьте первый элемент массива на второй, а третий элемент на четвертый.
// Результаты этих двух операций сложите. Выведите на экран данный массив и полученный результат.
const exerсise2 = () => {
   const arr = getRndArr(4, 1, 10);

   console.log(arr);

   // let result = arr[0] * arr[1] + arr[2] * arr[3]; // для конкретной задачи самое короткое, что смог придумать

   // для любой длины массива, но более объёмное и вроде как корявое...
   // с перебирающими методами массива ничего не получилось, пытался на reduce и foreach что-то изобразить
   // но не получилось... решил на простом for
   let result = 0;

   for (let i = 0; i < arr.length; i++) {
      i % 2 === 0 ? (result += arr[i] * arr[i + 1]) : null;
   }

   console.log(result);
};

// # Задание 3
// Дано четырехзначное число. Найдите сумму цифр этого числа.
const exerсise3 = () => {
   const num = getRndArr(4, 1, 9).join(''); // проще не придумал, как сгенерить 4х значное число для этого примера =)

   console.log(num);

   console.log(num.split('').reduce((acc, elem) => (acc += +elem), 0));
};

// Задание 4
// Создайте массив, состоящий из 4 произвольных значений, которые генерируются программой (диапазон значений от 1 до 10).
// Возведите каждый элемент этого массива в куб.
const exerсise4 = () => {
   const arr = getRndArr(4, 1, 10);

   console.log(arr);

   console.log(arr.map((elem) => elem ** 3));
};

// # Задание 5
// Дан массив `[1, 2, 3, 4, 5, 6, 7]`
// Сделайте из этого массива следующий `[1, 2, 3, 6, 7]`
const exerсise5 = () => {
   const arr = [1, 2, 3, 4, 5, 6, 7];

   console.log(arr);

   console.log(arr.filter((elem) => ![4, 5].includes(elem)));
};

// # Задание 6
// Дана строка `‘hello’` .
// Преобразуйте первые 2 буквы в верхний регистр, чтобы получилось `‘HEllo’`
const exercise6 = () => {
   const str = 'hello';

   console.log(str.slice(0, 2).toUpperCase() + str.slice(2));
};

// # Задание 7
// Создайте программу, которая спрашивает у пользователя число от 1 до 20.
// Результатом работы должен быть массив, содержащий только четные значения до введённого. Например, пользователь вводит 5, результат работы программы [2, 4].
const exercise7 = () => {
   const userMax = +prompt(
      'Введите число от 1 до 20, до которого сгенерировать массив чётных чисел'
   );

   if (isNaN(userMax) || userMax < 1 || userMax > 20) {
      alert('Вводить нужно ЧИСЛО от 1 до 20...');
   } else {
      const arr = [];
      // в условии не было указано, что значения до введенного ВКЛЮЧИТЕЛЬНО (если оно чётное)
      // поэтому в условии строго меньше, если нужно включительно то ставим в условии цикла <=.
      for (let i = 2; i < userMax; i += 2) {
         arr.push(i);
      }
      alert(
         `Получаем вот такой массив: [${arr.map(
            (elem) => ' ' + String(elem)
         )} ]`
      );
   }
};

// # Задание 8
// Генерация пароля.
// Дан набор цифр и букв `let data ="abcdefghijklmnopqrstuvwxyz0123456789"`
// Создайте программу, которая предлагает пользователю 8 произвольных значений из набора данных. Буквы могут быть как строчными, так и заглавными.
const exercise8 = () => {
   // мне захотелось немного приблизить задачку к реальной жизни,
   // поэтому решил спрашивать пользователя какое количество символов должно быть в пароле
   // а так же добавил немного другой логики
   let inputData = true;

   let start = false;

   let passLen = 0;

   while (inputData) {
      passLen = +prompt('Введите количество символов пароля.');

      if (isNaN(passLen)) {
         inputData = confirm(
            'Количество символов пароля должно быть ЧИСЛОМ. Попробовать ещё раз? Для выхода нажмите "Отмена"'
         );
      } else if (passLen < 8) {
         inputData = confirm(
            'Пароль менее 8 символов слишком ненадежный. Попробовать ещё раз? Для выхода нажмите "Отмена"'
         );
      } else {
         inputData = false;

         start = true;
      }
   }

   if (start && !inputData) {
      const data = 'abcdefghijklmnopqrstuvwxyz0123456789!@#^*()_+'; // ну какой же пароль без спец.символов?! =)
      const charIndexes = getRndArr(passLen, 0, data.length);
      const pass = [];
      charIndexes.forEach((charIndex) => {
         if (Math.round(Math.random())) {
            pass.push(data[charIndex].toUpperCase());
         } else {
            pass.push(data[charIndex]);
         }
      });

      alert(
         `ВНИМАНИЕ! Сгенерированный пароль нигде не сохранен!\nВосстановить его будет НЕВОЗМОЖНО.\nВаш пароль: ${pass.join(
            ''
         )}`
      );
   }

   alert('Спасибо, что воспользовались нашей программой.');
};

// # Задание 9
// Создайте калькулятор, который будет считать площадь треугольника по трём сторонам.
const exercise9 = () => {
   let userData = prompt(
      'Введите длины трёх сторон треугольника через пробел.'
   ).split(' ');

   userData = userData.map((elem) => Number(elem));

   if (
      userData.length === 3 &&
      !isNaN(userData[0]) &&
      !isNaN(userData[1]) &&
      !isNaN(userData[2])
   ) {
      let a = userData[0];
      let b = userData[1];
      let c = userData[2];

      if (a < b + c && b < a + c && c < a + b) {
         let p = (a + b + c) / 2;

         alert(
            `Площадь треугольника равна: ${
               (p * (p - a) * (p - b) * (p - c)) ** 0.5
            }.`
         );
      } else {
         alert('Треугольник с такими параметрами существовать не может');
      }
   } else {
      alert('Введены данные в неверном формате');
   }
};

// # Задание 10
// Создайте игру “Загадки”.  Пользователю предоставляется текст загадки:
// — Если он вводит ответ неверно, предоставить ему еще 2 попытки.
// — Поздравить пользователя при верном ответе.
// — Если попытки закончились, а загадка не разгадана, сообщить о проигрыше.
const exercise10 = () => {
   // Игра же называется "ЗагадкИ", а не "ЗагадкА" ;)
   const data = [
      // инициаилизруем массив с закадками и правильными ответами
      ['Зимой и летом - одним цветом', 'Ель'],
      ['Дед - в сто шуб одет', 'Лук'],
      ['Висит груша - нельзя скушать', 'Лампочка'],
      ['Два конца, два кольца, посредине гвоздик', 'Ножницы'],
      ['Не огонь, но жжется', 'Крапива'],
      ['Красна девица сидит в темнице, а коса на улице', 'Морковь'],
      ['Жидкое, но не вода, белое, но не снег', 'Молоко'],
      ['К нам приехали с бахчи, полосатые мячи', 'Арбуз'],
      ['Без рук без топоренка построена избёнка', 'Гнездо'],
      ['Летит, но не птица, воет, но не зверь', 'Ветер'],
      ['Разноцветное коромысло над рекою повисло', 'Радуга'],
      ['Без окон без дверей полна горница людей', 'Огурец'],
   ];

   // генерим случайное число, которое будет индексом загадки в массиве
   const index = getRndArr(1, 0, 11).join(''); // опять используем "массивный рандомайзер" для псевдослучайного выбора загадки

   console.log(data[index][1]); // Выведем правильный ответ в консоль для проверки работы программы

   // загадываем загадку первый раз и получаем ответ от пользователя
   let answer = prompt(`Отгадай загадку!${separText(data[index][0])}Ответ:`);

   let tryCount = 0; // инициализируем счетчик дополнительных попыток

   // если ответ неверный, крутим цикл с загадкой и счетчик попыток строго меньше 2
   while (answer !== data[index][1] && tryCount < 2) {
      tryCount++; // щёлкаем счетчик перед первой попыткой

      answer = prompt(
         `Не угадал, попробуй ещё раз!${separText(data[index][0])}Ответ:`
      );
   }

   if (answer === data[index][1]) {
      alert('Поздравляю, ты угадал!');
   } else {
      alert('К сожалению попытки закончились. Попробуй в другой раз!');
   }
};

// # Задание 11
// Создайте игру “Угадай число”. Компьютер генерирует цифру от 1 до 10, пользователю предоставляется 3 попытки для угадывания числа.
// — Если введенное число оказывается больше верного ответа, программа подсказывает об этом пользователю.
// — Если значение меньше, программа должна сообщить, что число меньше задуманного компьютером.
const exercise11 = () => {
   const num = +getRndArr(1, 1, 10).join(); //опять моя любимая функция :))

   console.log(num); // Правильный ответ в консоль для проверки работы программы

   let answer = prompt(`Отгадай какое число я загадал от 1 до 10!\nОтвет:`);

   if (isNaN(answer)) {
      alert('Вводить можно только число!');
   } else if (answer !== null && answer >= 1 && answer <= 10) {
      answer = +answer;

      let tryCount = 0;

      while (answer !== num && tryCount < 2) {
         tryCount++;

         answer = +prompt(
            `Не угадал! Загаданное число ${
               num > answer ? 'больше' : 'меньше'
            } твоего ответа.`
         );

         if (isNaN(answer)) {
            alert('Вводить можно только число!');
         }
      }

      if (answer === num) {
         alert('Поздравляю, ты угадал!');
      } else {
         alert(
            'Не угадал...\n\nК сожалению попытки закончились. Попробуй в другой раз!'
         );
      }
   } else if (answer !== null) {
      alert('Я же загадал число от 1 до 10... Не хочешь - как хочешь!');
   } else {
      alert('Пока!');
   }
};

// # Задание 12
// Напишите программу, которая реализует скидочную программу 3 = 2 (три по цене двух).
// Пользователь с клавиатуры вводит 3 числа, программа находит минимальное из этих чисел и не учитывает его при подсчете результата.
// Например, пользователь ввёл 10, 5, 20, программа определит, что минимальное — это значение 5, общая сумма будет равна 10 + 20 = 30. Ответ вывести в консоль.
const exercise12 = () => {
   let prices = prompt('Введите три цены через пробел').split(' ');

   if (isNaN(+prices.join('')) || prices.length !== 3) {
      alert('Данные введены в неверном формате');
   } else {
      console.log(
         prices
            .map((elem) => +elem)
            .filter((elem) => elem != Math.min(...prices))
            .reduce((acc, elem) => (acc += elem))
      );
   }
};

// решаем задачки на CodeWars
const codeWars = () => {};
